/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { StreetLight } from "./StreetLight";
import { StreetLightCountArgs } from "./StreetLightCountArgs";
import { StreetLightFindManyArgs } from "./StreetLightFindManyArgs";
import { StreetLightFindUniqueArgs } from "./StreetLightFindUniqueArgs";
import { CreateStreetLightArgs } from "./CreateStreetLightArgs";
import { UpdateStreetLightArgs } from "./UpdateStreetLightArgs";
import { DeleteStreetLightArgs } from "./DeleteStreetLightArgs";
import { StreetLightService } from "../streetLight.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StreetLight)
export class StreetLightResolverBase {
  constructor(
    protected readonly service: StreetLightService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StreetLight",
    action: "read",
    possession: "any",
  })
  async _streetLightsMeta(
    @graphql.Args() args: StreetLightCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StreetLight])
  @nestAccessControl.UseRoles({
    resource: "StreetLight",
    action: "read",
    possession: "any",
  })
  async streetLights(
    @graphql.Args() args: StreetLightFindManyArgs
  ): Promise<StreetLight[]> {
    return this.service.streetLights(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StreetLight, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StreetLight",
    action: "read",
    possession: "own",
  })
  async streetLight(
    @graphql.Args() args: StreetLightFindUniqueArgs
  ): Promise<StreetLight | null> {
    const result = await this.service.streetLight(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StreetLight)
  @nestAccessControl.UseRoles({
    resource: "StreetLight",
    action: "create",
    possession: "any",
  })
  async createStreetLight(
    @graphql.Args() args: CreateStreetLightArgs
  ): Promise<StreetLight> {
    return await this.service.createStreetLight({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StreetLight)
  @nestAccessControl.UseRoles({
    resource: "StreetLight",
    action: "update",
    possession: "any",
  })
  async updateStreetLight(
    @graphql.Args() args: UpdateStreetLightArgs
  ): Promise<StreetLight | null> {
    try {
      return await this.service.updateStreetLight({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StreetLight)
  @nestAccessControl.UseRoles({
    resource: "StreetLight",
    action: "delete",
    possession: "any",
  })
  async deleteStreetLight(
    @graphql.Args() args: DeleteStreetLightArgs
  ): Promise<StreetLight | null> {
    try {
      return await this.service.deleteStreetLight(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
