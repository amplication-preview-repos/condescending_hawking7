/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Pedestrian } from "./Pedestrian";
import { PedestrianCountArgs } from "./PedestrianCountArgs";
import { PedestrianFindManyArgs } from "./PedestrianFindManyArgs";
import { PedestrianFindUniqueArgs } from "./PedestrianFindUniqueArgs";
import { CreatePedestrianArgs } from "./CreatePedestrianArgs";
import { UpdatePedestrianArgs } from "./UpdatePedestrianArgs";
import { DeletePedestrianArgs } from "./DeletePedestrianArgs";
import { PedestrianService } from "../pedestrian.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Pedestrian)
export class PedestrianResolverBase {
  constructor(
    protected readonly service: PedestrianService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "read",
    possession: "any",
  })
  async _pedestriansMeta(
    @graphql.Args() args: PedestrianCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Pedestrian])
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "read",
    possession: "any",
  })
  async pedestrians(
    @graphql.Args() args: PedestrianFindManyArgs
  ): Promise<Pedestrian[]> {
    return this.service.pedestrians(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Pedestrian, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "read",
    possession: "own",
  })
  async pedestrian(
    @graphql.Args() args: PedestrianFindUniqueArgs
  ): Promise<Pedestrian | null> {
    const result = await this.service.pedestrian(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pedestrian)
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "create",
    possession: "any",
  })
  async createPedestrian(
    @graphql.Args() args: CreatePedestrianArgs
  ): Promise<Pedestrian> {
    return await this.service.createPedestrian({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pedestrian)
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "update",
    possession: "any",
  })
  async updatePedestrian(
    @graphql.Args() args: UpdatePedestrianArgs
  ): Promise<Pedestrian | null> {
    try {
      return await this.service.updatePedestrian({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pedestrian)
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "delete",
    possession: "any",
  })
  async deletePedestrian(
    @graphql.Args() args: DeletePedestrianArgs
  ): Promise<Pedestrian | null> {
    try {
      return await this.service.deletePedestrian(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
