/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PedestrianService } from "../pedestrian.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PedestrianCreateInput } from "./PedestrianCreateInput";
import { Pedestrian } from "./Pedestrian";
import { PedestrianFindManyArgs } from "./PedestrianFindManyArgs";
import { PedestrianWhereUniqueInput } from "./PedestrianWhereUniqueInput";
import { PedestrianUpdateInput } from "./PedestrianUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PedestrianControllerBase {
  constructor(
    protected readonly service: PedestrianService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pedestrian })
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPedestrian(
    @common.Body() data: PedestrianCreateInput
  ): Promise<Pedestrian> {
    return await this.service.createPedestrian({
      data: data,
      select: {
        count: true,
        createdAt: true,
        detectedAt: true,
        id: true,
        location: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Pedestrian] })
  @ApiNestedQuery(PedestrianFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async pedestrians(@common.Req() request: Request): Promise<Pedestrian[]> {
    const args = plainToClass(PedestrianFindManyArgs, request.query);
    return this.service.pedestrians({
      ...args,
      select: {
        count: true,
        createdAt: true,
        detectedAt: true,
        id: true,
        location: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pedestrian })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async pedestrian(
    @common.Param() params: PedestrianWhereUniqueInput
  ): Promise<Pedestrian | null> {
    const result = await this.service.pedestrian({
      where: params,
      select: {
        count: true,
        createdAt: true,
        detectedAt: true,
        id: true,
        location: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pedestrian })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePedestrian(
    @common.Param() params: PedestrianWhereUniqueInput,
    @common.Body() data: PedestrianUpdateInput
  ): Promise<Pedestrian | null> {
    try {
      return await this.service.updatePedestrian({
        where: params,
        data: data,
        select: {
          count: true,
          createdAt: true,
          detectedAt: true,
          id: true,
          location: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pedestrian })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Pedestrian",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePedestrian(
    @common.Param() params: PedestrianWhereUniqueInput
  ): Promise<Pedestrian | null> {
    try {
      return await this.service.deletePedestrian({
        where: params,
        select: {
          count: true,
          createdAt: true,
          detectedAt: true,
          id: true,
          location: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
